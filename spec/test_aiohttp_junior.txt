DATABASE: 
- Модель пользователей (Имя, Фамилия, логин, пароль, Дата Рождения)
- Модель права (Блокировка, Администратор, Только чтение)
ВАЖНО: 
- У 1 пользователя может быть или только Администатор или "Только чтение"
Изначально должен быть заведен 1 пользователь с правами Администратора admin, admin, admin, 01-01-1970
Будет + 
- если будет подключена миграция череp ALEMBIC


BACKEND:
- Запрос авторизации по логину и паролю
- Разработать CRUD (CREATE, READ, UPDATE, DELETE) на таблицу пользователей 

Требование к BACKEND
- Логирование
- доступ к этому API CRUD только после авторизации
- Соответственно Администраторы могут полный CRUD 
- "Только Чтение" могут только READ Для остальный методов forbidden
- Никакого Фронта не нужно. Общение только посредствам REST API

Будет огромный +: 
1. Cформированая документация swagger и доступ по url backend
2. Использование Docker, docker-compose, Makefile
3. Автотестирование (Pytest) routes backend желательно

Обязательный стэк
- BACKEND aiohttp, asyncio
- DataBase postgresql + SQlAlchemy > 1.4 (Желательно CORE, но и ORM тоже можно)

Код оформить на GitHub